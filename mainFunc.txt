// gormConnectはMySQLデータベースに接続するための関数です。
func gormConnect() *gorm.DB {
	DBMS := "mysql"        // 使用するデータベースの種類（ここではMySQL）
	USER := "test"         // データベースのユーザー名
	PASS := "12345678"     // データベースのパスワード
	DBNAME := "test"       // 接続するデータベースの名前

	CONNECT := USER + ":" + PASS + "@/" + DBNAME + "?parseTime=true"
	// データベース接続の設定文字列の作成
	// parseTime=trueを指定すると、データベースのDATE/DATETIME型をGoのtime.Time型にパースします

	db, err := gorm.Open(mysql.Open(CONNECT), &gorm.Config{})
	// GORMを使用してデータベースに接続します
	// mysql.Open関数に設定文字列を渡してデータベース接続を確立します

	if err != nil {
		panic(err.Error())
		// エラーが発生した場合は、エラーメッセージを表示してプログラムを停止します
	}

	return db
	// 正常に接続された場合は、データベースオブジェクトを返します
}

正常に接続された場合は、データベースオブジェクトを返します。このオブジェクトを使用して、データベース操作（クエリの実行、データの作成/読み取り/更新/削除など）を行うことができます。



// dbInitはデータベースを初期化するための関数です。
func dbInit() {
	db := gormConnect()
	// データベースに接続します（前のコードで定義したgormConnect関数を使用）

	defer db.Close()
	// 関数が終了する際にデータベース接続を閉じるようにします（deferを使用すると、関数の最後に実行されます）

	db.AutoMigrate(&Tweet{})
	// データベースのマイグレーションを実行します
	// AutoMigrate関数は、指定した構造体（ここではTweet構造体）に基づいて、テーブルが存在しない場合に新たにテーブルを作成します
}

最後に、db.AutoMigrate(&Tweet{})と記述されています。AutoMigrate関数は、指定した構造体（ここではTweet構造体）に基づいて、データベースのマイグレーションを実行します。マイグレーションは、データベースのスキーマを更新するために使用されます。&Tweet{}は、Tweet構造体のインスタンスを生成し、そのポインタを渡しています。これにより、GORMはTweet構造体の定義に基づいてテーブルを作成します。

このようにdbInit関数を呼び出すことで、データベースに接続し、必要なマイグレーションを実行することができます。

// dbInsertはデータベースにデータを挿入するための関数です。
func dbInsert(content string) {
	db := gormConnect()
	// データベースに接続します（前のコードで定義したgormConnect関数を使用）

	defer db.Close()
	// 関数が終了する際にデータベース接続を閉じるようにします（deferを使用すると、関数の最後に実行されます）

	db.Create(&Tweet{Content: content})
	// データベースに新しいレコードを作成します
	// Create関数には、作成するレコードの構造体のインスタンスを渡します
	// ここではTweet構造体のインスタンスを生成し、Contentフィールドに指定したcontentの値をセットしています
}

このコードでは、dbInsert関数が定義されています。まず、gormConnect関数を呼び出してデータベースに接続します。データベース接続が確立されると、データベースオブジェクト db が取得されます。

次に、defer db.Close()と記述されています。この行は、関数が終了する際にデータベース接続を閉じるように指示しています。データベース接続を閉じることは、リソースの解放やデータベースへの接続の確実な切断を行うために重要です。deferを使用することで、関数の実行が終了する直前にこの処理が実行されるようになります。

最後に、db.Create(&Tweet{Content: content})と記述されています。Create関数は、データベースに新しいレコードを作成します。&Tweet{Content: content}は、Tweet構造体のインスタンスを生成し、そのポインタを渡しています。構造体のフィールドには、Contentフィールドに指定したcontentの値がセットされます。これにより、GORMはデータベースに新しいレコードを作成します。

このようにdbInsert関数を呼び出すことで、指定したcontentを持つ新しいレコードがデータベースに挿入されます。


// dbUpdateは指定したIDのレコードを更新するための関数です。
func dbUpdate(id int, tweetText string) {
	db := gormConnect()
	// データベースに接続します（前のコードで定義したgormConnect関数を使用）

	var tweet Tweet
	// Tweet構造体の変数を宣言します

	db.First(&tweet, id)
	// 指定したIDのレコードをデータベースから取得し、tweet変数に格納します
	// First関数は、指定した構造体のポインタに、最初のレコードを取得します
	// &tweetはtweet変数のポインタを渡しています

	tweet.Content = tweetText
	// tweet変数のContentフィールドに、指定したtweetTextを代入します

	db.Save(&tweet)
	// 更新したtweet変数をデータベースに保存します

	db.Close()
	// データベース接続を閉じます
}

このコードでは、dbUpdate関数が定義されています。まず、gormConnect関数を呼び出してデータベースに接続します。データベース接続が確立されると、データベースオブジェクト db が取得されます。

次に、var tweet Tweetと記述されています。これは、Tweet構造体の変数 tweet を宣言しています。

その後、db.First(&tweet, id)と記述されています。この行は、指定したIDのレコードをデータベースから取得し、tweet 変数に格納します。First関数は、指定した構造体のポインタに、最初のレコードを取得します。&tweetはtweet変数のポインタを渡しています。

次に、tweet.Content = tweetTextと記述されています。これは、tweet変数のContentフィールドに、指定したtweetTextを代入しています。つまり、データベース内の該当するレコードのContentフィールドの値が更新されます。

最後に、db.Save(&tweet)と記述されています。これにより、更新したtweet変数の内容がデータベースに保存されます。

最後に、db.Close()と記述されています。これは、データベース接続を閉じるための処理です。関数の実行が終了する際にデータベース接続を閉じることで、リソースの解放やデータベースへの接続の確実な切断を行います。

このようにdbUpdate関数を呼び出すことで、指定したIDのレコードの内容を更新することができます。


// dbGetAllはデータベースから全てのレコードを取得するための関数です。
func dbGetAll() []Tweet {
	db := gormConnect()
	// データベースに接続します（前のコードで定義したgormConnect関数を使用）

	defer db.Close()
	// 関数が終了する際にデータベース接続を閉じるようにします（deferを使用すると、関数の最後に実行されます）

	var tweets []Tweet
	// Tweet構造体のスライスを宣言します

	db.Order("created_at desc").Find(&tweets)
	// データベース内の全てのレコードをcreated_atの降順で取得し、tweetsスライスに格納します
	// Order関数は、指定したフィールドと順序で結果をソートします
	// Find関数は、指定した構造体のポインタのスライスに、全てのレコードを取得します

	return tweets
	// データベースから取得したレコードのスライスを返します
}

このコードでは、dbGetAll関数が定義されています。まず、gormConnect関数を呼び出してデータベースに接続します。データベース接続が確立されると、データベースオブジェクト db が取得されます。

次に、defer db.Close()と記述されています。この行は、関数が終了する際にデータベース接続を閉じるように指示しています。データベース接続を閉じることは、リソースの解放やデータベースへの接続の確実な切断を行うために重要です。deferを使用することで、関数の実行が終了する直前にこの処理が実行されるようになります。

その後、var tweets []Tweetと記述されています。これは、Tweet構造体のスライス tweets を宣言しています。

最後に、db.Order("created_at desc").Find(&tweets)と記述されています。この行では、データベース内の全てのレコードをcreated_atフィールドの降順で取得し、tweetsスライスに格納しています。Order関数は、指定したフィールドと順序で結果をソートし、Find関数は指定した構造体のポインタのスライスに全てのレコードを取得します。

このようにdbGetAll関数を呼び出すことで、データベースから全てのレコードを取得することができます。取得したレコードはTweet構造体のスライスとして返されます。

// dbGetOneは指定したIDのレコードを取得するための関数です。
func dbGetOne(id int) Tweet {
	db := gormConnect()
	// データベースに接続します（前のコードで定義したgormConnect関数を使用）

	var tweet Tweet
	// Tweet構造体の変数を宣言します

	db.First(&tweet, id)
	// 指定したIDのレコードをデータベースから取得し、tweet変数に格納します
	// First関数は、指定した構造体のポインタに、最初のレコードを取得します
	// &tweetはtweet変数のポインタを渡しています

	db.Close()
	// データベース接続を閉じます

	return tweet
	// 取得したレコードを返します
}

このコードでは、dbGetOne関数が定義されています。まず、gormConnect関数を呼び出してデータベースに接続します。データベース接続が確立されると、データベースオブジェクト db が取得されます。

次に、var tweet Tweetと記述されています。これは、Tweet構造体の変数 tweet を宣言しています。

その後、db.First(&tweet, id)と記述されています。この行は、指定したIDのレコードをデータベースから取得し、tweet 変数に格納します。First関数は、指定した構造体のポインタに、最初のレコードを取得します。&tweetはtweet変数のポインタを渡しています。

最後に、db.Close()と記述されています。これは、データベース接続を閉じるための処理です。関数の実行が終了する際にデータベース接続を閉じることで、リソースの解放やデータベースへの接続の確実な切断を行います。

このようにdbGetOne関数を呼び出すことで、指定したIDのレコードを取得することができます。取得したレコードはTweet構造体として返されます。

// dbDeleteは指定したIDのレコードを削除するための関数です。
func dbDelete(id int) {
	db := gormConnect()
	// データベースに接続します（前のコードで定義したgormConnect関数を使用）

	var tweet Tweet
	// Tweet構造体の変数を宣言します

	db.First(&tweet, id)
	// 指定したIDのレコードをデータベースから取得し、tweet変数に格納します
	// First関数は、指定した構造体のポインタに、最初のレコードを取得します
	// &tweetはtweet変数のポインタを渡しています

	db.Delete(&tweet)
	// レコードをデータベースから削除します
	// Delete関数には、削除するレコードの構造体のポインタを渡します

	db.Close()
	// データベース接続を閉じます
}

このコードでは、dbDelete関数が定義されています。まず、gormConnect関数を呼び出してデータベースに接続します。データベース接続が確立されると、データベースオブジェクト db が取得されます。

次に、var tweet Tweetと記述されています。これは、Tweet構造体の変数 tweet を宣言しています。

その後、db.First(&tweet, id)と記述されています。この行は、指定したIDのレコードをデータベースから取得し、tweet 変数に格納します。First関数は、指定した構造体のポインタに、最初のレコードを取得します。&tweetはtweet変数のポインタを渡しています。

次に、db.Delete(&tweet)と記述されています。この行は、データベースからレコードを削除します。Delete関数には、削除するレコードの構造体のポインタを渡します。

最後に、db.Close()と記述されています。これは、データベース接続を閉じるための処理です。関数の実行が終了する際にデータベース接続を閉じることで、リソースの解放やデータベースへの接続の確実な切断を行います。

このようにdbDelete関数を呼び出すことで、指定したIDのレコードをデータベースから削除することができます。
